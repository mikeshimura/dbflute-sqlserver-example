
CREATE TABLE MEMBER(
	MEMBER_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
	MEMBER_NAME NVARCHAR(200) NOT NULL,
	MEMBER_ACCOUNT NVARCHAR(50) NOT NULL,
	MEMBER_STATUS_CODE CHAR(3) NOT NULL,
	FORMALIZED_DATETIME DATETIME,
	BIRTHDATE DATE,
	REGISTER_DATETIME DATETIME NOT NULL,
	REGISTER_USER NVARCHAR(200) NOT NULL,
	REGISTER_PROCESS NVARCHAR(200) NOT NULL,
	UPDATE_DATETIME DATETIME NOT NULL,
	UPDATE_USER NVARCHAR(200) NOT NULL,
	UPDATE_PROCESS NVARCHAR(200) NOT NULL,
	VERSION_NO BIGINT NOT NULL
);


CREATE TABLE MEMBER_ADDRESS(
	MEMBER_ADDRESS_ID INTEGER NOT NULL PRIMARY KEY,
	MEMBER_ID INTEGER NOT NULL,
	VALID_BEGIN_DATE DATE NOT NULL,
	VALID_END_DATE DATE NOT NULL,
	ADDRESS NVARCHAR(200) NOT NULL,
	REGION_ID INTEGER NOT NULL,
	REGISTER_DATETIME DATETIME NOT NULL,
	REGISTER_PROCESS NVARCHAR(200) NOT NULL,
	REGISTER_USER NVARCHAR(200) NOT NULL,
	UPDATE_DATETIME DATETIME NOT NULL,
	UPDATE_PROCESS NVARCHAR(200) NOT NULL,
	UPDATE_USER NVARCHAR(200) NOT NULL,
	VERSION_NO BIGINT NOT NULL
);


CREATE TABLE MEMBER_LOGIN(
	MEMBER_LOGIN_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
	MEMBER_ID INTEGER NOT NULL,
	LOGIN_DATETIME DATETIME NOT NULL,
	MOBILE_LOGIN_FLG INTEGER NOT NULL,
	LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL
)  ;


CREATE TABLE MEMBER_SECURITY(
	MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
	LOGIN_PASSWORD NVARCHAR(50) NOT NULL,
	REMINDER_QUESTION NVARCHAR(50) NOT NULL,
	REMINDER_ANSWER NVARCHAR(50) NOT NULL,
	REMINDER_USE_COUNT INTEGER NOT NULL,
	REGISTER_DATETIME DATETIME NOT NULL,
	REGISTER_PROCESS NVARCHAR(200) NOT NULL,
	REGISTER_USER NVARCHAR(200) NOT NULL,
	UPDATE_DATETIME DATETIME NOT NULL,
	UPDATE_PROCESS NVARCHAR(200) NOT NULL,
	UPDATE_USER NVARCHAR(200) NOT NULL,
	VERSION_NO BIGINT NOT NULL
);


create table MEMBER_SERVICE(
    MEMBER_SERVICE_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
    MEMBER_ID INTEGER NOT NULL,
    SERVICE_POINT_COUNT INTEGER NOT NULL,
    SERVICE_RANK_CODE CHAR(3) NOT NULL,
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER NVARCHAR(200) NOT NULL,
    REGISTER_PROCESS NVARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER NVARCHAR(200) NOT NULL,
    UPDATE_PROCESS NVARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
);


CREATE TABLE MEMBER_WITHDRAWAL(
	MEMBER_ID INTEGER NOT NULL PRIMARY KEY,
	WITHDRAWAL_REASON_CODE CHAR(3),
	WITHDRAWAL_REASON_INPUT_TEXT TEXT,
	WITHDRAWAL_DATETIME DATETIME NOT NULL,
	REGISTER_DATETIME DATETIME NOT NULL,
	REGISTER_PROCESS NVARCHAR(200) NOT NULL,
	REGISTER_USER NVARCHAR(200) NOT NULL,
	UPDATE_DATETIME DATETIME NOT NULL,
	UPDATE_PROCESS NVARCHAR(200) NOT NULL,
	UPDATE_USER NVARCHAR(200) NOT NULL,
	VERSION_NO BIGINT NOT NULL
)  ;


CREATE TABLE PURCHASE(
	PURCHASE_ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
	MEMBER_ID INTEGER NOT NULL,
	PRODUCT_ID INTEGER NOT NULL,
	PURCHASE_DATETIME DATETIME NOT NULL,
	PURCHASE_COUNT INTEGER NOT NULL,
	PURCHASE_PRICE INTEGER NOT NULL,
	PAYMENT_COMPLETE_FLG INTEGER NOT NULL,
	REGISTER_DATETIME DATETIME NOT NULL,
	REGISTER_USER NVARCHAR(200) NOT NULL,
	REGISTER_PROCESS NVARCHAR(200) NOT NULL,
	UPDATE_DATETIME DATETIME NOT NULL,
	UPDATE_USER NVARCHAR(200) NOT NULL,
	UPDATE_PROCESS NVARCHAR(200) NOT NULL,
	VERSION_NO BIGINT NOT NULL
);


CREATE TABLE PRODUCT(
	PRODUCT_ID INTEGER IDENTITY NOT NULL PRIMARY KEY,
	PRODUCT_NAME NVARCHAR(50) NOT NULL,
	PRODUCT_HANDLE_CODE NVARCHAR(100) NOT NULL,
	PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
	PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
	REGULAR_PRICE INTEGER NOT NULL,
	REGISTER_DATETIME DATETIME NOT NULL,
	REGISTER_USER NVARCHAR(200) NOT NULL,
	REGISTER_PROCESS NVARCHAR(200) NOT NULL,
	UPDATE_DATETIME DATETIME NOT NULL,
	UPDATE_USER NVARCHAR(200) NOT NULL,
	UPDATE_PROCESS NVARCHAR(200) NOT NULL,
	VERSION_NO BIGINT NOT NULL
);


create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL PRIMARY KEY,
    PRODUCT_CATEGORY_NAME NVARCHAR(50) NOT NULL,
    PARENT_CATEGORY_CODE CHAR(3)
);


CREATE TABLE PRODUCT_STATUS(
	PRODUCT_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
	PRODUCT_STATUS_NAME NVARCHAR(50) NOT NULL,
	DISPLAY_ORDER INTEGER NOT NULL
);


create table REGION(
    REGION_ID INTEGER NOT NULL PRIMARY KEY,
    REGION_NAME NVARCHAR(50) NOT NULL
);


create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL PRIMARY KEY,
    SERVICE_RANK_NAME NVARCHAR(50) NOT NULL,
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL,
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL,
    DESCRIPTION NVARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL
);


CREATE TABLE MEMBER_STATUS(
	MEMBER_STATUS_CODE CHAR(3) NOT NULL PRIMARY KEY,
	MEMBER_STATUS_NAME NVARCHAR(50) NOT NULL,
	DESCRIPTION NVARCHAR(200) NOT NULL,
	DISPLAY_ORDER INTEGER NOT NULL
);


CREATE TABLE WITHDRAWAL_REASON(
	WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL PRIMARY KEY,
	WITHDRAWAL_REASON_TEXT TEXT NOT NULL,
	DISPLAY_ORDER INTEGER NOT NULL
);


alter table MEMBER add CONSTRAINT FK_MEMBER_MEMBER_STATUS 
	foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE) ;

alter table MEMBER_ADDRESS add CONSTRAINT FK_MEMBER_ADDRESS_MEMBER 
	foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    FOREIGN KEY (REGION_ID) references REGION (REGION_ID);

alter table MEMBER_LOGIN add CONSTRAINT FK_MEMBER_LOGIN_MEMBER_STATUS 
	foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE) ;

alter table MEMBER_LOGIN add CONSTRAINT FK_MEMBER_LOGIN_MEMBER 
	foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_SECURITY add CONSTRAINT FK_MEMBER_SECURITY_MEMBER 
	foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    FOREIGN KEY (MEMBER_ID) references MEMBER (MEMBER_ID);

alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    FOREIGN KEY (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE);

alter table MEMBER_WITHDRAWAL add CONSTRAINT FK_MEMBER_WITHDRAWAL_MEMBER 
	foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_WITHDRAWAL add CONSTRAINT FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
	foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE) ;

alter table PURCHASE add CONSTRAINT FK_PURCHASE_MEMBER 
	foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table PURCHASE add CONSTRAINT FK_PURCHASE_PRODUCT 
	foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID) ;

alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    FOREIGN KEY (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE);

alter table PRODUCT add CONSTRAINT FK_PRODUCT_PRODUCT_STATUS 
	foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE) ;

alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    FOREIGN KEY (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE);


alter table MEMBER ADD CONSTRAINT UQ_MEMBER_MEMBER_ACCOUNT UNIQUE (MEMBER_ACCOUNT) ;
alter table MEMBER_ADDRESS ADD CONSTRAINT UQ_MEMBER_ADDRESS UNIQUE (MEMBER_ID, VALID_BEGIN_DATE) ;
-- It doesn't work! I Don't know why...
-- alter table MEMBER_LOGIN ADD CONSTRAINT UQ_MEMBER_LOGIN UNIQUE (MEMBER_ID, LOGIN_DATETIME) ;
alter table MEMBER_SERVICE add constraint UQ_MEMBER_SERVICE UNIQUE (MEMBER_ID);
-- It doesn't work! I Don't know why...
-- alter table PURCHASE ADD CONSTRAINT UQ_PURCHASE UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME) ;
alter table PRODUCT ADD CONSTRAINT UQ_PRODUCT_PRODUCT_HANDLE_CODE UNIQUE (PRODUCT_HANDLE_CODE) ;
alter table MEMBER_STATUS ADD CONSTRAINT UQ_MEMBER_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER) ;
alter table PRODUCT_STATUS add constraint UQ_PRODUCT_STATUS_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER);
alter table SERVICE_RANK add constraint UQ_SERVICE_RANK_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER);
alter table WITHDRAWAL_REASON ADD CONSTRAINT UQ_WITHDRAWAL_REASON_DISPLAY_ORDER UNIQUE (DISPLAY_ORDER) ;

