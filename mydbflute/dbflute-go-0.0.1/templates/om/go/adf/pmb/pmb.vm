package pmb

import (
    "github.com/mikeshimura/dbflute/df"
    "database/sql"
	"${goPackageBase}/adf/bhv"
	_ "${goPackageBase}/adf/cmeta"
	_ "${goPackageBase}/adf/centity"
#foreach ($package in $database.getPmbImportPackage("sql:df",$pmbClassName))
	"${package}"
#end
)

type C_${myExtendedParameterBeanClassName} struct {
    df.BasePmb
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
    ${database.initCap($propertyName)} interface{}
#end
}
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#set ($InitCapProp=$database.initCap($propertyName))
func (o *C_${myExtendedParameterBeanClassName}) Get${database.initCap($propertyName)}() interface{} {
	return o.${InitCapProp}
}
func (o *C_${myExtendedParameterBeanClassName}) Set${database.initCap($propertyName)}(value $propertyType) {
#if ($propertyType=="sql.NullString" || $propertyType=="string" )
	o.${InitCapProp} = o.CheckAndComvertEmptyToNull(value)
#else
	o.${InitCapProp} = value	
#end
}
#end

func (o *C_${myExtendedParameterBeanClassName}) GetEntityType() string {
	return "C_${pmbMetaData.getOutsideSqlFile().getEntityName()}"
}
func (o *C_${myExtendedParameterBeanClassName}) GetOutsideSqlPath() string {
	return "${goPackageBase}/adf/bhv/sql/${pmbMetaData.getOutsideSqlFile().getFileName()}"
}

#if ($pmbMetaData.isRelatedToCustomizeEntity())
func (o *C_${myExtendedParameterBeanClassName}) SelectList(tx *sql.Tx) (*df.ListResultBean, error) {
	return bhv.${pmbMetaData.getOutsideSqlFile().getBhvName()}_I.OutsideSql().SelectList(o,tx)

}
#else
func (o *C_${myExtendedParameterBeanClassName}) Execute(tx *sql.Tx) (int64, error) {
	return bhv.${pmbMetaData.getOutsideSqlFile().getBhvName()}_I.OutsideSql().Execute(o,tx)

}
#end