package entity

import (
	"github.com/mikeshimura/dbflute/df"
#foreach ($package in $table.getImportPackage("df"))
	"${package}"
#end
)

type ${entityClassName} struct {
#foreach ($col in $table.columns)	
	${col.getUncapitalisedJavaName()} ${col.getGoType()}
#end
	df.BaseEntity
}

func Create${entityClassName}() *${entityClassName}{
	${myEntityVariableName} :=new(${entityClassName})
	${myEntityVariableName}.SetUp()
	return ${myEntityVariableName} 
}

#foreach ($col in $table.columns)
func (l *${entityClassName}) Get${col.javaName} () ${col.getGoType()} {
	return l.${col.getUncapitalisedJavaName()}
}
#end

func (t *${entityClassName}) GetAsInterfaceArray() []interface{} {
	i := make([]interface{}, ${table.getColumnList().size()})
#set ( $count = 0)
#foreach ($col in $table.columns)	
	i[${count}] = &(t.${col.getUncapitalisedJavaName()})
#set ( $count = $count + 1)
#end
	return i
}


func (t *${entityClassName}) AsTableDbName() string {
	return "${entityClassName}"
}

func (t *${entityClassName}) HasPrimaryKeyValue() bool{
#foreach ($col in $table.primaryKey)
        if t.IsModifiedProperty("${col.uncapitalisedJavaName}") == false {
            return false 
        }
#end
        return ${table.hasPrimaryKey()};
}
#foreach ($col in $table.columns)
func (t *${entityClassName}) Set${col.javaName}(${col.uncapitalisedJavaName} ${col.getGoType()}) {
	t.AddPropertyName("${col.uncapitalisedJavaName}")
	t.${col.uncapitalisedJavaName} = ${col.uncapitalisedJavaName}
}
#end

func (t *${entityClassName}) SetUp(){
#foreach ($col in $table.columns)
#if (${col.getGoType()}=="df.Numeric" || ${col.getGoType()}=="df.NullNumeric") 	
	t.${col.getUncapitalisedJavaName()}.DecPoint = ${col.columnDecimalDigitsSettingExpression}
#end
#end
	
}
func (t *${entityClassName})GetDBMeta() *df.DBMeta{
	return df.DBMetaInstanceHandler_I.TableDbNameInstanceMap[t.AsTableDbName()]
}