package meta

import (
	"github.com/mikeshimura/dbflute/df"
)

type ${entityClassName}Dbm_T struct {
	df.BaseDBMeta
#foreach ($col in $table.columns)	
	Column${col.javaName} *df.ColumnInfo
#end
}

func (b *${entityClassName}Dbm_T) GetProjectName() string {
	return df.DBCurrent_I.ProjectName
}
#foreach ($fk in $table.joinableForeignKeyList)
func (b *${entityClassName}Dbm_T) foreign${fk.foreignPropertyNameInitCap}() *df.ForeignInfo {
	columns := []*df.ColumnInfo{
#foreach ($columnName in $fk.localColumnNameList)
#set ($localColumn = $table.getColumn($columnName))
#set ($foreignColumnName = $fk.getLocalForeignMapping().get($columnName))
		${entityClassName}Dbm.GetColumnInfoByPropertyName("$database.initUncap(${localColumn.javaName})"),
		${fk.foreignTableDBMetaClassName}.GetColumnInfoByPropertyName("$fk.getForeignPropertyName(${foreignColumnName})"),
#end
	}

	return b.BaseDBMeta.Cfi("${fk.name}", "${fk.foreignPropertyNameInitCap}",
		columns, ${table.resolveForeignIndex($fk)}, ${fk.isOneToOne()}, ${fk.isBizOneToOne()}, false, ${fk.isAdditionalForeignKey()},
		${fk.goFixedConditionArg}, ${fk.goDynamicFixedConditionDBMetaSetupList}, ${fk.isFixedInline()}, ${fk.goForeignReverseRelationPropertyNameArg})
}	
#end
func (b *${entityClassName}Dbm_T) CreateForeignInfoMap() {
	b.ForeignInfoMap = make(map[string]*df.ForeignInfo)
#foreach ($fk in $table.joinableForeignKeyList)
	b.ForeignInfoMap["${fk.foreignPropertyNameInitCap}"] = b.foreign${fk.foreignPropertyNameInitCap}()
#end
}

func (b *${entityClassName}Dbm_T) GetDbCurrent() *df.DBCurrent {
	return df.DBCurrent_I
}

var ${entityClassName}Dbm *${entityClassName}Dbm_T

func Create_${entityClassName}Dbm() {
	${entityClassName}Dbm = new(${entityClassName}Dbm_T)
	${entityClassName}Dbm.TableDbName = "${table.tableDbName}"
	${entityClassName}Dbm.TableDispName = "${table.tableDispName}"
	${entityClassName}Dbm.TablePropertyName = "${table.javaBeansRulePropertyName}"
	${entityClassName}Dbm.TableSqlName = new(df.TableSqlName)
	${entityClassName}Dbm.TableSqlName.TableSqlName = "${table.tableSqlName}"
	${entityClassName}Dbm.TableSqlName.CorrespondingDbName = ${entityClassName}Dbm.TableDbName
#if ($table.isUseIdentity())
	${entityClassName}Dbm.Identity=true
#end

	var ${myEntityVariableName} df.DBMeta
	${myEntityVariableName} = ${entityClassName}Dbm
	${entityClassName}Dbm.DBMeta=&${myEntityVariableName}
#foreach ($col in $table.columns)
#set ($tmpJavaName = "${col.javaName}")
#set ($tmpUncapitalisedJavaName = "${col.uncapitalisedJavaName}")		
	${tmpUncapitalisedJavaName}SqlName := new(df.ColumnSqlName)
	${tmpUncapitalisedJavaName}SqlName.ColumnSqlName = "${col.columnSqlName}"
	${tmpUncapitalisedJavaName}SqlName.IrregularChar = false
	${entityClassName}Dbm.Column${tmpJavaName} = df.CCI(&${myEntityVariableName}, "${col.name}", ${tmpUncapitalisedJavaName}SqlName, ${col.synonymSettingExpressionGo}, ${col.aliasSettingExpressionGo}, "${col.javaNativeTypeLiteral}", "${col.javaBeansRulePropertyName}", ${col.propertyAccessTypeLiteralGo}, ${col.isPrimaryKey()}, ${col.isAutoIncrement()},${col.isNotNull()}, "${col.dbTypeExpression}", ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression}, ${col.defaultValueSettingExpressionGo},${col.isCommonColumnGo()},"${col.optimistickLockExpressionGo}",${col.commentForDBMetaSettingExpressionGo}, ${col.foreignPropertyNameCommaStringLiteralExpressionGo},${col.referrerPropertyNameCommaStringLiteralExpressionGo},"${col.classificationMetaSettingExpressionGo}",${col.canBeColumnNullObjectGo()},"${col.getGoType()}")
#end

	${entityClassName}Dbm.ColumnInfoList = new(df.List)
#foreach ($col in $table.columns)	
	${entityClassName}Dbm.ColumnInfoList.Add(${entityClassName}Dbm.Column${col.javaName})
#end	


	${entityClassName}Dbm.ColumnInfoMap=make(map[string]int)
#set($count=0)
#foreach ($col in $table.columns)	
	${entityClassName}Dbm.ColumnInfoMap["${col.getUncapitalisedJavaName()}"]=${count}
	#set($count=$count+1)
#end
    ${entityClassName}Dbm.PrimaryKey = ${table.hasPrimaryKey()}
    ${entityClassName}Dbm.CompoundPrimaryKey = ${table.hasCompoundPrimaryKey()}
#if ($table.hasPrimaryKey())
	ui := new(df.UniqueInfo)
	ui.DbMeta = &${myEntityVariableName}
	ui.Primary = true
	ui.UniqueColumnList = new(df.List)
#if ($table.hasSinglePrimaryKey())
	ui.UniqueColumnList.Add(${entityClassName}Dbm.Column${table.primaryKeyAsOne.javaBeansRulePropertyNameInitCap})
#else
#foreach ($col in $table.primaryKey)
    ui.UniqueColumnList.Add(${entityClassName}Dbm.Column${col.javaBeansRulePropertyNameInitCap})
#end
#end

	${entityClassName}Dbm.PrimaryInfo = new(df.PrimaryInfo)
	${entityClassName}Dbm.PrimaryInfo.UniqueInfo = ui
	
#else

#end
#if ($table.isUseSequence())
	${entityClassName}Dbm.SequenceFlag = true
	${entityClassName}Dbm.SequenceName = "${table.sequenceSqlName}"
	${entityClassName}Dbm.SequenceIncrementSize = ${table.sequenceIncrementSizeExpression}
	${entityClassName}Dbm.SequenceCacheSize = ${table.sequenceCacheSizeExpressionGo}
#end
#if ($table.isUseVersionNo())
	${entityClassName}Dbm.VersionNoFlag = true
	${entityClassName}Dbm.VersionNoColumnInfo = ${entityClassName}Dbm.Column${table.versionNoJavaName}
	
#end
#if ($table.hasAllCommonColumn())	
	${entityClassName}Dbm.CommonColumnFlag = true
	${entityClassName}Dbm.CommonColumnInfoList = new(df.List)
	//getCommonColumnInfoList()
	${entityClassName}Dbm.CommonColumnInfoBeforeInsertList = new(df.List)
	//getCommonColumnInfoBeforeInsertList()
	${entityClassName}Dbm.CommonColumnInfoBeforeUpdateList = new(df.List)
	//getCommonColumnInfoBeforeUpdateList()
	
#end
	var ${myEntityVariableName}Meta df.DBMeta = ${entityClassName}Dbm
	df.DBMetaInstanceHandler_I.TableDbNameInstanceMap["${entityClassName}"] = &${myEntityVariableName}Meta
}
