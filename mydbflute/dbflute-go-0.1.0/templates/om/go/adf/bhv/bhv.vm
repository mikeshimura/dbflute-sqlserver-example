package bhv

import (
	"database/sql"
	"github.com/mikeshimura/dbflute/df"
#if ($table.isWritable())	
	"${goPackageBase}/adf/entity"
#end
	"${goPackageBase}/adf/cb"
	"${goPackageBase}/adf/meta"
)

type ${entityClassName}Bhv struct {
	BaseBehavior *df.BaseBehavior
}
func (l *${entityClassName}Bhv) GetDBMeta() *df.DBMeta{
	var meta df.DBMeta=meta.${entityClassName}Dbm
	return &meta
}
func (l *${entityClassName}Bhv) GetBaseBehavior() *df.BaseBehavior {
	return l.BaseBehavior
}
#if ($table.isWritable())
func (l *${entityClassName}Bhv) Update(${myEntityVariableName} *entity.${entityClassName}, tx *sql.Tx, ctx *df.Context) (int64, error) {
	var entity df.Entity = ${myEntityVariableName}
	return l.BaseBehavior.DoUpdate(&entity, nil, tx, ctx)
}
func (l *${entityClassName}Bhv) Insert(${myEntityVariableName} *entity.${entityClassName}, tx *sql.Tx, ctx *df.Context) (int64, error) {
	var entity df.Entity = ${myEntityVariableName}
	return l.BaseBehavior.DoInsert(&entity, nil, tx, ctx)
}
func (l *${entityClassName}Bhv) Delete(${myEntityVariableName} *entity.${entityClassName}, tx *sql.Tx, ctx *df.Context) (int64, error) {
	var entity df.Entity = ${myEntityVariableName}
	return l.BaseBehavior.DoDelete(&entity, nil, tx, ctx)
}
#end
func (l *${entityClassName}Bhv) SelectList(cb *cb.${entityClassName}CB, tx *sql.Tx) (*df.ListResultBean, error) {

	return l.BaseBehavior.DoSelectList(cb, "${entityClassName}", tx)
}
func (l *${entityClassName}Bhv) SelectCount(cb *cb.${entityClassName}CB, tx *sql.Tx) (int64, error) {

	return l.BaseBehavior.DoSelectCount(cb, tx)
}
func (l *${entityClassName}Bhv) OutsideSql() *df.OutsideSqlBasicExecutor {
	return l.BaseBehavior.DoOutsideSql()
}

func (l *${entityClassName}Bhv) ReadNextVal(tx *sql.Tx) int64{
	return l.BaseBehavior.DoSelectNextVal(tx)
}

var ${entityClassName}Bhv_I *${entityClassName}Bhv
