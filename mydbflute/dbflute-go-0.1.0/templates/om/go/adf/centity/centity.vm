package centity

import (
	"github.com/mikeshimura/dbflute/df"
#foreach ($package in $table.getImportPackage("df"))
	"${package}"
#end
)

type C_${entityClassName}  struct {
#foreach ($col in $table.columns)	
	${col.javaName} ${col.getGoType()}
#end
	df.BaseEntity
}
#foreach ($col in $table.columns)
func (l *C_${entityClassName}) Get${col.javaName} () ${col.getGoType()} {
	return l.${col.javaName}
}
#end


func (t *C_${entityClassName}) GetAsInterfaceArray() []interface{} {
	i := make([]interface{}, ${table.getColumnList().size()})
#set ( $count = 0)
#foreach ($col in $table.columns)	
	i[${count}] = &(t.${col.javaName})
#set ( $count = $count + 1)
#end
	return i
}

func (t *C_${entityClassName}) AsTableDbName() string {
	return "c_${entityClassName}"
}

func (t *C_${entityClassName}) HasPrimaryKeyValue() bool{
#foreach ($col in $table.primaryKey)
        if t.IsModifiedProperty("${col.uncapitalisedJavaName}") == false {
            return false 
        }
#end
        return ${table.hasPrimaryKey()};
}
#foreach ($col in $table.columns)
func (t *C_${entityClassName}) Set${col.javaName}(${col.uncapitalisedJavaName} ${col.getGoType()}) {
	t.AddPropertyName("${col.uncapitalisedJavaName}")
	t.${col.javaName} = ${col.uncapitalisedJavaName}
}
#end


func (t *C_${entityClassName}) SetUp(){
#foreach ($col in $table.columns)
#if (${col.getGoType()}=="df.Numeric" || ${col.getGoType()}=="df.NullNumeric") 	
	t.${col.getUncapitalisedJavaName()}.DecPoint = ${col.columnDecimalDigitsSettingExpression}
#end
#end	
}


func (t *C_${entityClassName})GetDBMeta() *df.DBMeta{
	return df.DBMetaInstanceHandler_I.TableDbNameInstanceMap[t.AsTableDbName()]
}